The server and the browser are the two entities communicating
when we have a webpage.

Servers store essential and persistent data, like emails and passwords

Browsers store temporary, "convenience" data

- localStorage & sessionStorage
  - simple key-value store, like a JS object with key-value pairs
  - manage user preferences or basic user data
  - can be cleared by the user and via JS
  - easy to use, quite versatile, but bad for complex data
  - we should never treat these storages as the single source of truth
  - we can't rely on data to persist in localStorage because users can delete
    them and browsers can delete them if they run out of disk space
  - sessionStorage data lives us long as our page is OPEN in the browser,
    as long as we have it in an active tab, even if we reload the page
  - localStorage isn't cleared unless the user clears it manually

- Cookies
  - simple key-value store that can be configured in various ways
  - manage user preferences or basic user data
  - can be cleared by the user and via JS
  - a bit clunky to use, quite versatile
  - sent to the server with outgoing HTTP requests
  - bad for complex data
  - cookies are really only available if our webpage is getting
    served with a real server
  - if a cookie has an HttpOnly flag, it's not accessible by
    browser-side JS and only accessible in the server
  - retrieval is all or nothing, unlike in local and session storage
  - if we don't set an expiration date on a cookie, it expires when our
    session expires

- IndexedDB
  - in-browser DB
  - relatively sophisticated, client-side database
  - manage complex data your web app needs
  - can be cleared by the user and via JS
  - a bit clunky to use
  - good performance
  - works with object stores
  - critical data should not be stored here
  - idb.js is a useful library that helps us work with IndexedDB
